<local:SingleRunMappingTool x:Class="Mapping_Tools.Views.HitsoundPreviewHelper.HitsoundPreviewHelperView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Mapping_Tools.Views"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:domain="clr-namespace:Mapping_Tools.Components.Domain"
             x:Name="This"
             mc:Ignorable="d" Width="900" Height="700">
    <UserControl.Resources>
        <domain:IntToStringConverter x:Key="I2SConverter"/>
        <domain:DoubleToStringConverter x:Key="D2SConverter"/>
        <domain:SampleSetToStringConverter x:Key="Ss2SConverter"/>
        <domain:HitsoundToStringConverter x:Key="Hs2SConverter"/>
    </UserControl.Resources>
    <Grid Name="MasterGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid Name="FirstGrid" Grid.Row="0">
            <Grid Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>


              <StackPanel Orientation="Horizontal" Grid.Row="0">
                <TextBlock FontSize="32" FontWeight="Bold" Foreground="{DynamicResource PrimaryHueMidBrush}">
                  <Run Text="Hitsound Preview Helper"/>
                </TextBlock>
                    <materialDesign:PopupBox Margin="10" VerticalAlignment="Bottom" ToolTip="Click me!">
                  <materialDesign:PopupBox.ToggleContent>
                    <materialDesign:PackIcon Kind="HelpCircle" Width="24" Height="24" Foreground="{DynamicResource SecondaryHueMidBrush}"/>
                  </materialDesign:PopupBox.ToggleContent>
                  <TextBlock TextWrapping="Wrap" MaxWidth="600" Padding="5">
                    Hitsound Preview Helper helps by placing hitsounds on all the objects of the current map based on the positions of the objects. That way you can hear the hitsounds play while you hitsound without having to assign them manually and later import them to Hitsound Studio.
                    <LineBreak/>
                    This tool is meant to help a very specific hitsounding workflow. If you hitsound by placing circles on different parts on the screen and treat each position as a different layer of hitsounds. For example using a mania map and have each column represent a different sound.
                  </TextBlock>
                    </materialDesign:PopupBox>
                  <materialDesign:PopupBox Margin="0,10,10,10" VerticalAlignment="Bottom" ToolTip="Click me!">
                      <materialDesign:PopupBox.ToggleContent>
                          <materialDesign:PackIcon Kind="LightningBoltCircle" Width="24" Height="24" Foreground="{DynamicResource PrimaryHueLightBrush}"/>
                      </materialDesign:PopupBox.ToggleContent>
                      <TextBlock TextWrapping="Wrap" MaxWidth="600" Padding="5">
                          This tool is compatible with QuickRun!
                      </TextBlock>
                  </materialDesign:PopupBox>
                </StackPanel>
              
                <DataGrid
                    Grid.Row="1"
                    Margin="0 18 0 50"
                    ItemsSource="{Binding Items}"
                    CanUserSortColumns="True"
                    CanUserAddRows="False"
                    AutoGenerateColumns="False"
                    materialDesign:DataGridAssist.CellPadding="13 8 8 8"
                    materialDesign:DataGridAssist.ColumnHeaderPadding="8"
                    VerticalScrollBarVisibility="Auto">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
                            <Setter Property="IsSelected"
                                Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn
                            Binding="{Binding IsSelected}"
                            ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}">
                            <DataGridCheckBoxColumn.Header>
                                <!--padding to allow hit test to pass thru for sorting -->
                                <Border
                                    Background="Transparent"
                                    Padding="6 0 6 0"
                                    HorizontalAlignment="Center">
                                    <CheckBox
                                        HorizontalAlignment="Center"
                                        DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext}"
                                        IsChecked="{Binding IsAllItemsSelected}" />
                                </Border>
                            </DataGridCheckBoxColumn.Header>
                        </DataGridCheckBoxColumn>
                        <materialDesign:DataGridTextColumn
                            Binding="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                            Header="Name"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
                        <materialDesign:DataGridTextColumn
                            Binding="{Binding Filename, UpdateSourceTrigger=PropertyChanged}"
                            Header="Filename"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
                        <materialDesign:DataGridTextColumn
                            Binding="{Binding XPos, Converter={StaticResource D2SConverter}, ConverterParameter=-1, UpdateSourceTrigger=PropertyChanged}"
                            Header="X position"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                        <materialDesign:DataGridTextColumn
                            Binding="{Binding YPos, Converter={StaticResource D2SConverter}, ConverterParameter=-1, UpdateSourceTrigger=PropertyChanged}"
                            Header="Y position"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                        <!-- use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo -->
                        <materialDesign:DataGridComboBoxColumn
                            Header="Hitsound"
                            SelectedValueBinding="{Binding Hitsound, Converter={StaticResource Hs2SConverter}, UpdateSourceTrigger=PropertyChanged}"
                            ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Hitsounds}" />
                        <materialDesign:DataGridComboBoxColumn
                            Header="SampleSet"
                            SelectedValueBinding="{Binding SampleSet, Converter={StaticResource Ss2SConverter}, UpdateSourceTrigger=PropertyChanged}"
                            ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.SampleSets}" />
                        <materialDesign:DataGridComboBoxColumn
                            Header="Additions"
                            SelectedValueBinding="{Binding AdditionsSet, Converter={StaticResource Ss2SConverter}, UpdateSourceTrigger=PropertyChanged}"
                            ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.SampleSets}" />
                        <materialDesign:DataGridTextColumn
                            Binding="{Binding CustomIndex, Converter={StaticResource I2SConverter}, ConverterParameter=0, UpdateSourceTrigger=PropertyChanged}"
                            Header="Custom index"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"/>
                    </DataGrid.Columns>
                </DataGrid>

                <StackPanel
                        Grid.Row="2"
                        Margin="5 5 100 5"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        Orientation="Horizontal">
                    <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" ToolTip="Generate rhythm guide." Command="{Binding RhythmGuideCommand}" Margin="5">
                        <materialDesign:PackIcon Kind="AlternatingCurrent" Height="24" Width="24" />
                    </Button>
                    <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" ToolTip="Add a hitsound zone. Hold shift to add current selected coordinates." Command="{Binding AddCommand}" Margin="5">
                        <materialDesign:PackIcon Kind="Plus" Height="24" Width="24" />
                    </Button>
                    <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" ToolTip="Copy selected hitsound zones." Command="{Binding CopyCommand}" Margin="5">
                        <materialDesign:PackIcon Kind="ContentCopy" Height="24" Width="24" />
                    </Button>
                    <Button Style="{StaticResource MaterialDesignFloatingActionMiniLightButton}" ToolTip="Remove selected hitsound zones." Command="{Binding RemoveCommand}" Margin="5">
                        <materialDesign:PackIcon Kind="Trashcan" Height="24" Width="24" />
                    </Button>
                </StackPanel>
            </Grid>

            <Viewbox VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70" Margin="10">
                <Button
                    IsEnabled="{Binding ElementName=This, Path=CanRun}"
                    Style="{StaticResource MaterialDesignFloatingActionButton}"
                    Click="Start_Click"
                    ToolTip="Run this tool.">
                    <materialDesign:PackIcon
                        Kind="Play" Height="36" Width="36" />
                </Button>
            </Viewbox>
        </Grid>
        <Grid Name="SecondGrid" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <WrapPanel VerticalAlignment="Bottom">
                    <TextBlock TextWrapping="NoWrap" Text="Made by OliBomby" FontWeight="Bold" Opacity="0.58"/>
                </WrapPanel>
            </Grid>
            <Grid Grid.Column="1">
                <ProgressBar Value="{Binding ElementName=This, Path=Progress}" Margin="20,0,20,0" Height="20" Background="{x:Null}" BorderBrush="{x:Null}"/>
            </Grid>
        </Grid>
    </Grid>
</local:SingleRunMappingTool>
